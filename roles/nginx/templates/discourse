types {
  text/csv csv;
}

upstream discourse {
  {% for i in range(num_webs) %}
    server unix:/home/discourse/sockets/thin.{{i}}.sock;
  {% endfor %}
}

# Redirect all other domain names to the specified domain name.
server {
  server_name _;
  rewrite ^/(.*)$ http://{{domain_name}}/$1 permanent;
}


server {
  listen 80;
  gzip on;
  gzip_min_length 1000;
  gzip_types application/json text/css application/x-javascript;

  server_name {{domain_name}};

  sendfile on;

  keepalive_timeout 65;

  client_max_body_size 2m;

  # path to discourse's public directory
  set $public /home/discourse/discourse/public;

  location / {
    root $public;

    location ~ ^/assets/ {
      expires 1y;
      add_header Cache-Control public;
      add_header ETag "";
      break;
    }

    location ~ ^/uploads/ {
      expires 1y;
      add_header Cache-Control public;
      add_header ETag "";

      ## optional upload anti-hotlinking rules
      #valid_referers none blocked mysite.com *.mysite.com;
      #if ($invalid_referer) {
      #  return 403;
      #}

      # let NGINX serve images and CSS
      location ~* \.(gif|png|jpg|jpeg|bmp|tif|tiff|css)$ { try_files $uri =404; }
      location ~ /_optimized/ { try_files $uri =404; }

      # attachments must go through the rails application to get the right content-disposition header
      proxy_set_header X-Sendfile-Type X-Accel-Redirect;
      proxy_set_header X-Accel-Mapping $public/=/downloads/;
      proxy_pass http://discourse;
      break;
    }

    try_files $uri @discourse;
  }

  location /downloads/ {
    internal;
    alias $public/;
  }

  location @discourse {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;

    proxy_pass http://discourse;
  }
}
